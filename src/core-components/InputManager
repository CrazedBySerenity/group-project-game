import {useState, useEffect, useContext} from 'react';

const InputManager = () => {
    //COLLECTING PLAYER INPUT
    // HandleKeyDown and HandleKeyUp are functions called when a key is pressed or released
    // If the player presses up or down, and the game has not been started or aint over, it is 
    // shown as marked and the game is started. 
    useEffect(() => {
    const handleKeyDown = (e) => {
        console.log(e.keyCode);
        // Function that reacts to down presses buttons. 
        if (validUpKeyCodes.includes(e.keyCode)) {
        setUpIsPressed(true);
        if (!gameOver && !gameStarted) {
            setAsteroidSpeed(gameAreaSize.width * 0.005);
            setGameStarted(true);
        }
        }
        if (validDownKeyCodes.includes(e.keyCode)) {
        setDownIsPressed(true);
        if (!gameOver && !gameStarted) {
            setAsteroidSpeed(gameAreaSize.width * 0.005);
            setGameStarted(true);
        }
        }
        if (e.keyCode === 32) {
        setSpaceIsPressed(true);
        }
    };

    // --> Valid buttons are required for the game to start
    // Basic flow:
    // --> ValidUpKeyCodes and validDownKeyCodes are condition checks if the down presses button is valid
    // --> If the button is valid, 'upIsPressed is set to 'true'
    // --> GameOver & gameStarted is being controlled to be true, and if so, the code continues running 


    const handleKeyUp = (e) => {
      console.log(e.keyCode);

      if (gameOver && validRestartKeyCodes.includes(e.keyCode)) {
        setgameOver(false);
        setCurrentScore(0);
        //Do more stuff to restart the game
        // COMMENT - Do something to this?
      }

      if (validUpKeyCodes.includes(e.keyCode)) {
        setUpIsPressed(false);
      }
      if (validDownKeyCodes.includes(e.keyCode)) {
        setDownIsPressed(false);
      }
      if (e.keyCode === 32) {
        setSpaceIsPressed(false);
      } // What does 32 mean?
    };

    document.addEventListener("keydown", handleKeyDown);
    document.addEventListener("keyup", handleKeyUp);

    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  });
}